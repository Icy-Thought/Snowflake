#+TITLE: Doom-Emacs Configuration
#+AUTHOR: Icy-Thought
#+PROPERTY: header-args:emacs-lisp :tangle config.el
#+PROPERTY: header-args :comments no
#+STARTUP: fold

* Table of Contents :TOC:noexport:
- [[#introduction][Introduction]]
- [[#configel][Config.el]]
  - [[#doomdir][DOOMDIR]]
  - [[#personal-info][Personal Info]]
  - [[#appearance][Appearance]]
  - [[#behaviour][Behaviour]]
  - [[#window-general][Window (General)]]
  - [[#key-mapping][Key-Mapping]]
  - [[#company-mode][Company Mode]]
  - [[#language-server][Language Server]]
  - [[#org-mode][Org-Mode]]
- [[#initel][Init.el]]
  - [[#doomdir-1][DOOMDIR]]
  - [[#structure][Structure]]
  - [[#applications-inside-emacs][Applications inside Emacs]]
  - [[#default-keybindings][Default Keybindings]]
- [[#packagesel][Packages.el]]
  - [[#doomdir-2][DOOMDIR]]
  - [[#installation-instructions][Installation Instructions]]
  - [[#pdf-tools][PDF-Tools]]
  - [[#org-roam][Org-Roam]]
- [[#inspiration][Inspiration]]

* Introduction
~doom-config.org~ is a one org-file -> three ~el~ configurations files. By default, ~doom-config.org~ combines everything into ~config.el~ if not specified otherwise, like in ~init.el~ and ~package.el~ through the usage of ~:comments no~.

* Config.el
** DOOMDIR
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Icy-Thought"
      user-mail-address "gilganyx@pm.me")
#+end_src

** Appearance
*** General
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil
      display-line-numbers-type 'relative
      all-the-icons-dired-monochrome nil
      x-stretch-cursor t)
#+end_src

*** (Doom) Theme + Font
#+begin_src emacs-lisp
(setq doom-theme 'doom-city-lights
      doom-font (font-spec :family "VictorMono Nerd Font" :size 12.0 :weight 'SemiBold)
      doom-big-font (font-spec :family "VictorMono Nerd Font" :size 15.0 :weight 'SemiBold)
      doom-variable-pitch-font (font-spec :family "VictorMono Nerd Font" :size 12.0 :weight 'SemiBold))
#+end_src

**** FIX: Broken Emacsclient Theme
#+begin_src emacs-lisp
(defun apply-theme ()
  (interactive)
  (load-theme 'doom-city-lights t))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame (apply-theme))))
  (apply-theme))
#+end_src
*** Solaire Mode
Invert colors -> darker theming:
#+begin_src emacs-lisp
(with-eval-after-load 'solaire-mode
  (add-to-list 'solaire-mode-themes-to-face-swap "^doom-"))
#+end_src

*** Doom-Modeline
#+begin_src emacs-lisp
(after! doom-modeline
 (setq evil-normal-state-tag "λ"
       evil-insert-state-tag ""
       evil-visual-state-tag "麗"
       evil-motion-state-tag ""
       evil-emacs-state-tag "<EMACS>")

  (setq doom-modeline-height 35
        doom-modeline-modal-icon nil
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline-buffer-encoding nil
        inhibit-compacting-font-caches t
        find-file-visit-truename t)

  (custom-set-faces!
    '(doom-modeline-evil-insert-state :inherit doom-modeline-urgent)
    '(doom-modeline-evil-visual-state :inherit doom-modeline-warning)
    '(doom-modeline-evil-normal-state :inherit doom-modeline-buffer-path))

  ;; (display-time-mode 1)
  (display-battery-mode 1)
  (setq doom-modeline-enable-word-count t))
#+end_src

*** Transparency
Enable transparency for emacs frame only + retaining brightness of remaining objects:
#+begin_src emacs-lisp :tangle no
(doom/set-frame-opacity 95)
#+end_src

*** Splash Screen (WIP)
#+begin_src emacs-lisp :tangle no
(defvar fancy-splash-image-template
  (expand-file-name "misc/splash-images/blackhole-lines-template.svg" doom-private-dir)
  "Default svg-template -> splash image + substitutions from")

(defvar fancy-splash-sizes
  `((:height 300 :min-height 50 :padding (0 . 4)))
  ":height    -> Image height
  :min-height -> Minimum image `frame-height'
  :padding    -> Applied `+doom-dashboard-banner-padding'
  :template   -> Non-default template file
  :file       -> File to replace template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8)))

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            theme-name
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  (with-temp-buffer
    (insert-file-contents template)
    (re-search-forward "$height" nil t)
    (replace-match (number-to-string height) nil nil)
    (dolist (substitution fancy-splash-template-colours)
      (goto-char (point-min))
      (while (re-search-forward (car substitution) nil t)
        (replace-match (doom-color (cdr substitution)) nil nil)))
    (write-region nil nil
                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&rest _)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+end_src

*** Centaur-Tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  (centaur-tabs-mode -1)
  (centaur-tabs-headline-match)
  (centaur-tabs-change-fonts "VictorMono Nerd Font" 125)

  (setq centaur-tabs-height 32
        centaur-tabs-style "wave"
        centaur-tabs-set-bar nil
        centaur-tabs-set-icons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-modified-marker "◉"
        centaur-tabs-close-button "✕"
        centaur-tabs-show-navigation-buttons nil
        centaur-tabs-down-tab-text "✦"
        centaur-tabs-backward-tab-text "⏴"
        centaur-tabs-forward-tab-text "⏵")

  (custom-set-faces!
    `(tab-line :background ,(doom-color 'base1) :foreground ,(doom-color 'base1))
    `(centaur-tabs-default :background ,(doom-color 'base1) :foreground ,(doom-color 'base1))
    `(centaur-tabs-active-bar-face :background ,(doom-color 'base1) :foreground ,(doom-color 'base1))
    `(centaur-tabs-unselected-modified :background ,(doom-color 'base1) :foreground ,(doom-color 'violet))
    `(centaur-tabs-unselected :background ,(doom-color 'base1) :foreground ,(doom-color 'base4))
    `(centaur-tabs-selected-modified :background ,(doom-color 'bg) :foreground ,(doom-color 'violet))
    `(centaur-tabs-selected :background ,(doom-color 'bg) :foreground ,(doom-color 'blue))))
#+end_src

*** Treemacs
**** Appearance
#+begin_src emacs-lisp
(setq treemacs-width 27
      doom-themes-treemacs-theme "doom-colors")

(doom-themes-treemacs-config)
#+end_src

**** Ignore Useless Files
#+begin_src emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))
#+end_src

Extension of files to be ignored:
#+begin_src emacs-lisp
(setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))
#+end_src

*** Which-Key
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src

** Behaviour
*** General
#+begin_src emacs-lisp
(setq scroll-margin 2)

(setq-default delete-by-moving-to-trash t)              ; Move file tot trash when deleted.
#+end_src

*** Fix: Problematic Hooks
When one of the org-mode-hook functions errors -> halts the hook execution.
#+begin_src emacs-lisp
(defadvice! shut-up-org-problematic-hooks (orig-fn &rest args)
  :around #'org-fancy-priorities-mode
  :around #'org-superstar-mode
  (ignore-errors (apply orig-fn args)))
#+end_src

** Window (General)
#+begin_src emacs-lisp
;; Resize windows for optimal window space
(setq window-combination-resize t)
#+end_src

** Key-Mapping
*** Window-related
**** Window Rotation
Enables window rotation through the usage of =<Space>= + arrow-keys:
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout

      ;; Navigation
      "<left>"          #'evil-window-left
      "<down>"          #'evil-window-down
      "<up>"            #'evil-window-up
      "<right>"         #'evil-window-right

      ;; Swapping windows
      "C-<left>"        #'+evil/window-move-left
      "C-<down>"        #'+evil/window-move-down
      "C-<up>"          #'+evil/window-move-up
      "C-<right>"       #'+evil/window-move-right)
#+end_src
**** Switch Buffer on ~CTRL+Pg~
#+begin_src emacs-lisp
(map! [C-next]  #'next-buffer
      [C-prior] #'previous-buffer)
;; or
(map! "<C-next>"  #'next-buffer
      "<C-prior>" #'previous-buffer)
#+end_src

*** Mouse
#+begin_src emacs-lisp
(map! :n [mouse-8] #'scroll-up-command
      :n [mouse-9] #'scroll-down-command)
#+end_src

** Company Mode
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 1
        company-show-numbers t))
#+end_src

** Language Server
#+begin_src emacs-lisp
(after! haskell-mode
  (set-formatter! 'stylish-haskell "stylish-haskell"
    :modes '(haskell-mode)))

(after! rustic
  (setq rustic-lsp-server 'rust-analyzer))
#+end_src

** Org-Mode
*** Basic Org-Configurations
**** General
#+begin_src emacs-lisp
(setq org-directory "~/org/"                            ; Default Org-Directories
      org-ascii-charset 'utf-8
      org-list-allow-alphabetical t                     ; have a. A. a) A) list bullets
      org-export-in-background t                        ; run export processes in external emacs process
      org-catch-invisible-edits 'smart)                 ; try not to accidently do weird stuff in invisible regions

#+end_src
**** Appearance
#+begin_src emacs-lisp
(setq org-ascii-charset 'utf-8
      org-ellipsis " ▾"
      org-src-fontify-natively t
      org-hide-block-startup nil
      org-startup-folded 'content
      org-cycle-separator-lines 2)
#+end_src

Control how tabbed lists behaves:
#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet
      '(("+" . "-") ("-" . "+") ("1)" . "a)") ("1." . "a.")))
#+end_src

Control heading sizes for a saner org-look:
#+begin_src emacs-lisp
(custom-set-faces!
  '(org-document-title :height 1.20)
  '(outline-1 :weight ExtraBold :height 1.25)
  '(outline-2 :weight Bold :height 1.15)
  '(outline-3 :weight Bold :height 1.12)
  '(outline-4 :weight Medium :height 1.09)
  '(outline-5 :weight Medium :height 1.06)
  '(outline-6 :weight Medium :height 1.03)
  '(outline-8 :weight Medium)
  '(outline-9 :weight Medium))
#+end_src

**** GnuPlot
#+begin_src emacs-lisp
(after! org-plot
  (defun org-plot/generate-theme (_type)
    "Use the current Doom theme colours to generate a GnuPlot preamble."
    (format "
      fgt = \"textcolor rgb '%s'\" # foreground text
      fgat = \"textcolor rgb '%s'\" # foreground alt text
      fgl = \"linecolor rgb '%s'\" # foreground line
      fgal = \"linecolor rgb '%s'\" # foreground alt line

      # foreground colors
      set border lc rgb '%s'
      # change text colors of  tics
      set xtics @fgt
      set ytics @fgt
      # change text colors of labels
      set title @fgt
      set xlabel @fgt
      set ylabel @fgt
      # change a text color of key
      set key @fgt

      # line styles
      set linetype 1 lw 2 lc rgb '%s' # red
      set linetype 2 lw 2 lc rgb '%s' # blue
      set linetype 3 lw 2 lc rgb '%s' # green
      set linetype 4 lw 2 lc rgb '%s' # magenta
      set linetype 5 lw 2 lc rgb '%s' # orange
      set linetype 6 lw 2 lc rgb '%s' # yellow
      set linetype 7 lw 2 lc rgb '%s' # teal
      set linetype 8 lw 2 lc rgb '%s' # violet

      # border styles
      set tics out nomirror
      set border 3

      # palette
      set palette maxcolors 8
      set palette defined ( 0 '%s',\
      1 '%s',\
      2 '%s',\
      3 '%s',\
      4 '%s',\
      5 '%s',\
      6 '%s',\
      7 '%s' )
      "
            (doom-color 'fg)
            (doom-color 'fg-alt)
            (doom-color 'fg)
            (doom-color 'fg-alt)
            (doom-color 'fg)

            ;; colours
            (doom-color 'red)
            (doom-color 'blue)
            (doom-color 'green)
            (doom-color 'magenta)
            (doom-color 'orange)
            (doom-color 'yellow)
            (doom-color 'teal)
            (doom-color 'violet)

            ;; duplicated
            (doom-color 'red)
            (doom-color 'blue)
            (doom-color 'green)
            (doom-color 'magenta)
            (doom-color 'orange)
            (doom-color 'yellow)
            (doom-color 'teal)
            (doom-color 'violet)
            ))

  (defun org-plot/gnuplot-term-properties (_type)
    (format "background rgb '%s' size 1050,650"
            (doom-color 'bg)))
  (setq org-plot/gnuplot-script-preamble #'org-plot/generate-theme)
  (setq org-plot/gnuplot-term-extra #'org-plot/gnuplot-term-properties))
#+end_src

**** Spell-Checking
Disable spell-checking by default to retain performance speed for larger files:
#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'spell-fu-mode)
#+end_src

*** Org-Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/org/roam/"
      deft-directory "~/org/roam/")
#+end_src

**** Org-Roam-UI
#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :hook (org-roam . org-roam-ui-mode)
  :config
  (require 'org-roam) ; in case autoloaded
  (setq org-roam-ui-sync-theme t
      org-roam-ui-follow t
      org-roam-ui-update-on-save t)
  (defun org-roam-ui-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless org-roam-ui-mode (org-roam-ui-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-ui-port))))
#+end_src

**** Doom-modeline Adjustment for Org-Roam-UI
#+begin_src emacs-lisp
(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)
  :around #'doom-modeline-buffer-file-name ; takes no args
  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "🢔(\\1-\\2-\\3) "
       (subst-char-in-string ?_ ?  buffer-file-name))
    (funcall orig-fun)))
#+end_src

**** Org-Roam Buffer -> Org-Roam-UI
#+begin_src emacs-lisp
(after! org-roam
   (setq +org-roam-open-buffer-on-find-file nil))
#+end_src

*** Enable Proper Org SVG-Export
#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

*** (Async) Config Tangle
#+begin_src emacs-lisp
(defvar +literate-tangle--proc nil)
(defvar +literate-tangle--proc-start-time nil)

(defadvice! +literate-tangle-async-h ()
  "A very simplified version of `+literate-tangle-h', but async."
  :override #'+literate-tangle-h
  (unless (getenv "__NOTANGLE")
    (let ((default-directory doom-private-dir))
      (when +literate-tangle--proc
        (message "Killing outdated tangle process...")
        (set-process-sentinel +literate-tangle--proc #'ignore)
        (kill-process +literate-tangle--proc)
        (sit-for 0.3)) ; ensure the message is seen for a bit
      (setq +literate-tangle--proc-start-time (float-time)
            +literate-tangle--proc
            (start-process "tangle-config"
                           (get-buffer-create " *tangle config*")
                           "emacs" "--batch" "--eval"
                           (format "(progn \
(require 'ox) \
(require 'ob-tangle) \
(setq org-confirm-babel-evaluate nil \
      org-inhibit-startup t \
      org-mode-hook nil \
      write-file-functions nil \
      before-save-hook nil \
      after-save-hook nil \
      vc-handled-backends nil \
      org-startup-folded nil \
      org-startup-indented nil) \
(org-babel-tangle-file \"%s\" \"%s\"))"
                                   +literate-config-file
                                   (expand-file-name (concat doom-module-config-file ".el")))))
      (set-process-sentinel +literate-tangle--proc #'+literate-tangle--sentinel)
      (run-at-time nil nil (lambda () (message "Tangling config.org"))) ; ensure shown after a save message
      "Tangling config.org...")))

(defun +literate-tangle--sentinel (process signal)
  (cond
   ((and (eq 'exit (process-status process))
         (= 0 (process-exit-status process)))
    (message "Tangled config.org sucessfully (took %.1fs)"
             (- (float-time) +literate-tangle--proc-start-time))
    (setq +literate-tangle--proc nil))
   ((memq (process-status process) (list 'exit 'signal))
    (+popup-buffer (get-buffer " *tangle config*"))
    (message "Failed to tangle config.org (after %.1fs)"
             (- (float-time) +literate-tangle--proc-start-time))
    (setq +literate-tangle--proc nil))))

(defun +literate-tangle-check-finished ()
  (when (and (process-live-p +literate-tangle--proc)
             (yes-or-no-p "Config is currently retangling, would you please wait a few seconds?"))
    (switch-to-buffer " *tangle config*")
    (signal 'quit nil)))
(add-hook! 'kill-emacs-hook #'+literate-tangle-check-finished)
#+end_src

* Init.el
** DOOMDIR
NOTE: Press ~K~ on a module to view its documentation, and ~gd~ to browse its directory.
#+begin_src emacs-lisp :tangle "init.el"
;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Structure
~init.el~ broken down to a more sane version for easier access and to become more comprehensive:

*** Doom Input
#+begin_src emacs-lisp :tangle "init.el"
(doom! :input
       ;;chinese
       ;;japanese
       )
#+end_src

*** Doom Completion
#+begin_src emacs-lisp :tangle "init.el"
(doom! :completion
       (company +auto                           ; the ultimate code completion backend
                +childframe)                    ; Better UI!
       (vertico +icons)                         ; the search engine of the future
       )
#+end_src

*** Doom UI
#+begin_src emacs-lisp :tangle "init.el"
(doom! :ui
       deft                                     ; notational velocity for Emacs
       doom                                     ; what makes DOOM look the way it does
       doom-dashboard                           ; a nifty splash screen for Emacs
       doom-quit                                ; DOOM quit-message prompts when you quit Emacs
       hl-todo                                  ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       (ligatures +extra)                       ; ligatures and symbols to make your code pretty again
       modeline                                 ; snazzy, Atom-inspired modeline, plus API
       ophints                                  ; highlight the region an operation acts on
       (popup +all                              ; tame sudden yet inevitable temporary windows
              +defaults)
       (tabs +centaur-tabs)                     ; a tab bar for Emacs
       (emoji +unicode
              +github)
       vc-gutter                                ; vcs diff in the fringe
       vi-tilde-fringe                          ; fringe tildes to mark beyond EOB
       workspaces                               ; tab emulation, persistence & separate workspaces
       treemacs                                 ; a project drawer, like neotree but cooler
       ;;zen                                    ; distraction-free coding or writing
       )
#+end_src

*** Doom Editor
#+begin_src emacs-lisp :tangle "init.el"
(doom! :editor
       (evil +everywhere)                       ; come to the dark side, we have cookies
       file-templates                           ; auto-snippets for empty files
       fold                                     ; (nigh) universal code folding
       (format +onsave)                         ;  automated prettiness
       ;;multiple-cursors                       ; editing in many places at once
       snippets                                 ; my elves. They type so I don't have to
       ;;word-wrap                              ; soft wrapping with language-aware indent
       )
#+end_src

*** Doom Emacs
#+begin_src emacs-lisp :tangle "init.el"
(doom! :emacs
       (dired +ranger                           ; making dired pretty [functional]
              +icons)
       electric                                 ; smarter, keyword-based electric-indent
       (ibuffer +icon)                          ; interactive buffer management
       (undo +tree)                             ; persistent, smarter undo for your inevitable mistakes
       vc                                       ; version-control and Emacs, sitting in a tree
       )
#+end_src

*** Doom Term
#+begin_src emacs-lisp :tangle "init.el"
(doom! :term
       ;;eshell                                 ; the elisp shell that works everywhere
       vterm                                    ; the best terminal emulation in Emacs
       )
#+end_src

*** Doom Checkers
#+begin_src emacs-lisp :tangle "init.el"
(doom! :checkers
       (syntax +childframe)                     ; Tasing you for every semicolon you forget.
       (spell +aspell)                          ; Tasing you for mispelling on the fly.
       grammar                                  ; tasing grammar mistake every you make
       )
#+end_src

*** Doom Tools
#+begin_src emacs-lisp :tangle "init.el"
(doom! :tools
       (debugger +lsp)                          ; FIXME stepping through code, to help you add bugs
       (eval +overlay)                          ; run code, run (also, repls)
       (lookup +dictionary)                     ; navigate your code and its documentation
       lsp
       (magit +forge)                           ; a git porcelain for Emacs
       make                                     ; run make tasks from Emacs
       pdf                                      ; pdf enhancements
       rgb                                      ; creating color strings
       )
#+end_src

*** Doom OS
#+begin_src emacs-lisp :tangle "init.el"
(doom! :os
       tty                                      ; improve the terminal Emacs experience
       )
#+end_src

*** Doom LANG
#+begin_src emacs-lisp :tangle "init.el"
(doom! :lang
       ;;cc                                     ; C/C++/Obj-C madness.
       ;;common-lisp                            ; If you've seen one lisp, you've seen them all.
       ;;coq                                    ; Proofs-as-programs.
       ;;data                                   ; Config/data formats.
       ;;(dart +flutter)                        ; Paint ui and not much else.
       emacs-lisp                               ; Drown in parentheses.
       ;;erlang                                 ; An elegant language for a more civilized age.
       ;;ess                                    ; Emacs speaks statistics.
       ;;(go +lsp)                              ; The hipster dialect.
       (haskell +lsp)                           ; a language that's lazier than I am
       ;;json                                   ; At least it ain't XML.
       ;;(java +meghanada)                      ; The poster child for carpal tunnel syndrome.
       (javascript +lsp)                        ; All(hope(abandon(ye(who(enter(here)))))).
       ;;(julia +lsp)                           ; A better, faster MATLAB.
       ;;kotlin                                 ; A better, slicker Java(Script).
       (latex +latexmk                          ; LaTeX compiler of choice. (alt: lualatex)
              +cdlatex                          ; LaTeX math completions.
              +fold)                            ; Folding ability inside LaTeX.
       ;;ledger                                 ; An accounting system in Emacs.
       lua                                      ; One-based indices? one-based indices.
       ;;markdown                               ; Writing docs for people to ignore.
       nix                                      ; I hereby declare "nix geht mehr!"
       (org +pretty                             ; Prettify org-mode.
            +dragndrop                          ; Enables drag & drop in org-mode.
            +gnuplot                            ; Enables gnu-plotting.
            +present                            ; Org-mode presentations.
            ;; +jupyter                         ; ipython/jupyter support for babel.
            ;;+hugo                             ; Enable ox-hugo support.
            +roam)                              ; Note-taking done correct in org-mode.
       ;;perl                                   ; write code no one else can comprehend
       (python +lsp                             ; Python + LSP support.
               +pyright)                        ; Beautiful is better than ugly
       ;;qt                                     ; The 'cutest' gui framework ever
       ;;(ruby +rails)                          ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)                              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                                  ; Java, but good
       ;;scheme                                 ; A fully conniving family of lisps
       ;;solidity                               ; Do you need a blockchain? No.
       ;;swift                                  ; Who asked for emoji variables?
       ;;terra                                  ; Earth and Moon in alignment for performance.
       ;;yaml                                   ; JSON, but readable.
       ;;(zig +lsp)                             ; C, but simpler.
       )
#+end_src

** Applications inside Emacs
*** Doom E-Mail
#+begin_src emacs-lisp :tangle "init.el"
(doom! :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)
       )
#+end_src

*** Doom Applications
#+begin_src emacs-lisp :tangle "init.el"
(doom! :app
       ;;calendar
       ;;emms                                   ; Emacs Multimedia System.
       ;;everywhere                             ; *Leave* Emacs!? You must be joking.
       ;;irc                                    ; How neckbeards socialize
       ;;(rss +org)                             ; Emacs as an RSS reader
       ;;twitter                                ; Twitter client https://twitter.com/vnought
       )
#+end_src

** Default Keybindings
*** Doom Config
#+begin_src emacs-lisp :tangle "init.el"
(doom! :config
       ;;literate
       (default +bindings +smartparens)
       )
#+end_src

* Packages.el
** DOOMDIR
According to default ~package.el~, this file should not be byte-compiled!
#+begin_src emacs-lisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

** Installation Instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

This is where you install packages, by declaring them with the ~package!~ macro, then running ~doom refresh~ on the command line. You'll need to restart Emacs for your changes to take effect! Or at least, run ~M-x doom/reload~.

*Warning*: Don't disable core packages listed in ~~/.emacs.d/core/packages.el~. Doom requires these, and disabling them may have terrible side effects.

*** Packages in MELPA/ELPA/Emacsmirror
To install ~some-package~ from MELPA, ELPA or Emacsmirror:
#+begin_src emacs-lisp
(package! some-package)
#+end_src

*** Packages from git repositories
To install a package directly from a particular repo, you'll need to specify a ~:recipe~. You'll find documentation on what ~:recipe~ accepts [[https://github.com/raxod502/straight.el#the-recipe-format][here]]:
#+begin_src emacs-lisp
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a ~PACKAGENAME.el~ file, or is located in a subdirectory of the repo, you'll need to specify ~:files~ in the ~:recipe~:
#+begin_src emacs-lisp
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

*** Disabling built-in packages
If you'd like to disable a package included with Doom, for whatever reason, you can do so here with the ~:disable~ property:
#+begin_src emacs-lisp
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify all the properties for ~:recipe~. These will inherit the rest of its recipe from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag. This is required for some packages whose default branch isn't 'master' (which our package manager can't deal with; see [[https://github.com/raxod502/straight.el/issues/279][raxod502/straight.el#279]])
#+begin_src emacs-lisp
(package! builtin-package :recipe (:branch "develop"))
#+end_src

** PDF-Tools
PDF-View -> use active theme foreground ++ background:
#+begin_src emacs-lisp
(use-package pdf-view
  :hook (pdf-tools-enabled . pdf-view-themed-minor-mode)
  :config
  (setq-default pdf-view-display-size 'fit-page))
#+end_src

*** Prefer Local Packages (Nix)
#+begin_src emacs-lisp :tangle "packages.el"
(package! pdf-tools :built-in 'prefer)
#+end_src

** Org-Roam
#+begin_src emacs-lisp :tangle "packages.el"
(package! org-roam-ui :recipe (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out")) :pin "cd1aefd56f648d32a25aae672ac1ab90893c0133")

(package! websocket :pin "fda4455333309545c0787a79d73c19ddbeb57980") ; dependency of `org-roam-ui'
#+end_src

* Inspiration
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Zzamboni]]
- [[https://config.daviwil.com/emacs][David Wilson]]
- [[https://github.com/tecosaur][Tecosaur]]
